// app.jsx - Definitive Final Version with All Features, Fixes, and New UI

const { useState, useEffect, useCallback, useRef } = React;

// --- Custom Hooks & Helpers ---
const useDebounce = (value, delay) => { const [debouncedValue, setDebouncedValue] = useState(value); useEffect(() => { const handler = setTimeout(() => setDebouncedValue(value), delay); return () => clearTimeout(handler); }, [value, delay]); return debouncedValue; };
const useLocalStorage = (key, initialValue) => { const [storedValue, setStoredValue] = useState(() => { try { const item = window.localStorage.getItem(key); return item ? JSON.parse(item) : initialValue; } catch (error) { console.log(error); return initialValue; }}); const setValue = (value) => { try { const valueToStore = value instanceof Function ? value(storedValue) : value; setStoredValue(valueToStore); window.localStorage.setItem(key, JSON.stringify(valueToStore)); } catch (error) { console.log(error); }}; return [storedValue, setValue]; };
const getSeasonalGenres = () => { const month = new Date().getMonth(); if (month === 9) return [{id: '27', name: 'Horror'}, {id: '9648', name: 'Mystery'}, {id: '53', name: 'Thriller'}]; if (month === 11) return [{id: '10751', name: 'Family'}, {id: '35', name: 'Comedy'}, {id: '10749', name: 'Romance'}]; if (month === 1) return [{id: '10749', name: 'Romance'}, {id: '35', name: 'Comedy'}]; return [{id:'28', name:'Action'}, {id:'878', name:'Sci-Fi'}, {id:'18', name:'Drama'}]; };

// --- Reusable UI Components ---
const Loader = () => <div className="loader mx-auto my-8"></div>;
const ErrorDisplay = ({ message }) => <div className="p-4 my-4 text-center text-red-400 font-semibold bg-red-900/20 border border-red-800 rounded-lg">{message}</div>;

const Slider = ({ children }) => {
    const scrollRef = useRef(null);
    const scroll = (direction) => { if (scrollRef.current) { scrollRef.current.scrollBy({ left: direction * (scrollRef.current.clientWidth * 0.8), behavior: 'smooth' }); } };
    return (<div className="slider-container"><button className="slider-arrow left" onClick={() => scroll(-1)}>&#8249;</button><div ref={scrollRef} className="horizontal-scroll-container">{children}</div><button className="slider-arrow right" onClick={() => scroll(1)}>&#8250;</button></div>);
};

const TrailerModal = ({ trailerKey, onClose }) => { if (!trailerKey) return null; return ( <div className="modal-overlay" onClick={onClose}><div className="relative w-full max-w-4xl" onClick={e => e.stopPropagation()}><button onClick={onClose} className="modal-close-btn text-white z-20"><svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" /></svg></button><div className="trailer-responsive"><iframe src={`https://www.youtube.com/embed/${trailerKey}?autoplay=1&rel=0`} frameBorder="0" allow="autoplay; encrypted-media" allowFullScreen title="Movie Trailer"></iframe></div></div></div>);};
const ActorDetailsModal = ({ actor, onClose }) => { if (!actor) return <div className="modal-overlay"><Loader /></div>; const knownFor = [...(actor.movie_credits?.cast || []), ...(actor.tv_credits?.cast || [])].filter(item => item.poster_path).sort((a, b) => b.popularity - a.popularity).slice(0, 10); return ( <div className="modal-overlay" onClick={onClose}><div className="modal-content relative w-full max-w-4xl" onClick={e => e.stopPropagation()}><button onClick={onClose} className="modal-close-btn text-white"><svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" /></svg></button><div className="overflow-y-auto"><div className="p-6 md:flex md:space-x-8"><div className="md:w-1/3 flex-shrink-0 text-center"><img src={actor.profile_path ? `${TMDB_IMAGE_BASE_URL}${actor.profile_path}` : 'https://via.placeholder.com/500x750.png?text=No+Image'} alt={actor.name} className="rounded-lg shadow-lg w-2/3 md:w-full mx-auto" /></div><div className="mt-4 md:mt-0 md:w-2/3"><h2 className="text-3xl md:text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)]">{actor.name}</h2><p className="mt-4 text-base leading-relaxed max-h-60 overflow-y-auto">{actor.biography || "No biography available."}</p></div></div>{knownFor.length > 0 && (<div className="p-6 border-t border-[var(--color-card-border)]"><h3 className="text-xl font-semibold mb-4 text-[var(--color-accent-text)]">Known For</h3><Slider>{knownFor.map(item => (<div key={item.credit_id || item.id} className="flex-shrink-0 w-32 text-center"><img src={`${TMDB_IMAGE_BASE_URL}${item.poster_path}`} alt={item.title || item.name} className="rounded-lg" /><span className="block mt-2 text-xs text-gray-400">{item.title || item.name}</span></div>))}</Slider></div>)}</div></div></div>);};
const SettingsMenu = ({ onCountryChange, onSelectTheme, currentTheme, displayMode, onDisplayModeChange, onOpenWatched, onOpenWatchlist, t }) => { const [isOpen, setIsOpen] = useState(false); const dropdownRef = useRef(null); useEffect(() => { const handleClickOutside = (e) => { if (dropdownRef.current && !dropdownRef.current.contains(e.target)) setIsOpen(false); }; document.addEventListener("mousedown", handleClickOutside); return () => document.removeEventListener("mousedown", handleClickOutside); }, []); return ( <div ref={dropdownRef} className="settings-menu-container"> <button onClick={() => setIsOpen(!isOpen)} className="theme-toggle" title="Settings"><svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.096 2.572-1.065z"></path><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg></button> {isOpen && ( <div className="settings-dropdown"> <div className="space-y-4"> <div><h4 className="text-sm font-semibold text-gray-400 mb-2">Accent Color</h4><div className="flex items-center justify-around bg-gray-700/50 p-2 rounded-full border border-gray-600"> {ACCENT_COLORS.map(c => ( <button key={c.name} onClick={() => onSelectTheme(c)} className="w-6 h-6 rounded-full transition-transform duration-150 transform hover:scale-110" style={{backgroundColor: c.color}} title={c.name}> {currentTheme.name === c.name && <svg className="w-6 h-6 text-white p-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" /></svg>} </button>))} </div></div> <div><h4 className="text-sm font-semibold text-gray-400 mb-2">Display Mode</h4><div className="flex items-center p-1 rounded-full bg-gray-700/50 border border-gray-600"> <button onClick={() => onDisplayModeChange('light')} className={`w-1/2 py-1 text-sm rounded-full ${displayMode==='light'?'bg-white text-black':'text-gray-300'}`}>Light</button> <button onClick={() => onDisplayModeChange('dark')} className={`w-1/2 py-1 text-sm rounded-full ${displayMode==='dark'?'bg-[var(--color-accent)] text-white':'text-gray-300'}`}>Dark</button> </div></div> <div className="space-y-2 pt-2 border-t border-[var(--color-card-border)]"><button onClick={()=>{onOpenWatchlist();setIsOpen(false);}} className="w-full text-left px-3 py-2 text-sm text-gray-300 rounded-lg hover:bg-gray-700/50 transition">My Watchlist</button><button onClick={()=>{onOpenWatched();setIsOpen(false);}} className="w-full text-left px-3 py-2 text-sm text-gray-300 rounded-lg hover:bg-gray-700/50 transition">Watched List</button><button onClick={()=>{onCountryChange();setIsOpen(false);}} className="w-full text-left px-3 py-2 text-sm text-gray-300 rounded-lg hover:bg-gray-700/50 transition">{t.changeCountry}</button></div> </div> </div>)} </div>);};
const SearchBar = ({ onSearch, onResultClick, searchResults }) => { const [query, setQuery] = useState(''); const debouncedQuery = useDebounce(query, 300); const searchRef = useRef(null); const [isFocused, setIsFocused] = useState(false); useEffect(() => { onSearch(debouncedQuery); }, [debouncedQuery, onSearch]); useEffect(() => { const handleClickOutside = (e) => { if (searchRef.current && !searchRef.current.contains(e.target)) setIsFocused(false); }; document.addEventListener("mousedown", handleClickOutside); return () => document.removeEventListener("mousedown", handleClickOutside); }, []); const handleResultItemClick = (result) => { setQuery(''); setIsFocused(false); onResultClick(result); }; return ( <div ref={searchRef} className="search-container"><input type="text" placeholder="Search for a movie or TV show..." value={query} onChange={(e) => setQuery(e.target.value)} onFocus={() => setIsFocused(true)} className="search-input" /> {isFocused && searchResults.length > 0 && ( <div className="search-results-dropdown">{searchResults.map(result => ( <div key={result.id} className="search-result-item" onClick={() => handleResultItemClick(result)}><img src={result.poster} alt={result.title} /><div className="search-result-info"><span className="search-result-title">{result.title}</span><span className="search-result-year">{result.year}</span></div></div>))}</div>)}</div>);};
const CountrySelector = ({ countries = [], onSelect, t }) => { const [searchTerm, setSearchTerm] = useState(''); const filteredCountries = Array.isArray(countries) ? countries.filter(c => c.english_name.toLowerCase().includes(searchTerm.toLowerCase())) : []; return ( <div className="modal-overlay"><div className="country-selector-modal"><div className="p-4 border-b border-[var(--color-card-border)]"><h2 className="text-xl font-bold text-center text-transparent bg-clip-text bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)]">{t.selectCountry}</h2><input type="text" placeholder={t.searchCountry} value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full p-3 mt-4 rounded-lg bg-gray-700/50 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-purple-500" /></div><div className="country-list">{searchTerm.length === 0 ? <div className="p-4 text-center text-gray-400">Start typing to find your country.</div> : filteredCountries.length > 0 ? filteredCountries.map(c => (<button key={c.iso_3166_1} onClick={() => onSelect(c.iso_3166_1)} className="country-list-item">{c.english_name}</button>)) : <div className="p-4 text-center text-gray-400">No countries found.</div>}</div></div></div>);};
const FilterModal = ({ isOpen, onClose, allGenres, allPlatforms, filters, onFilterChange, onClearFilters, onActorSearch, personResults }) => { if (!isOpen) return null; const [platformSearch, setPlatformSearch] = useState(''); const debouncedPersonQuery = useDebounce(filters.personQuery || '', 400); useEffect(() => { onActorSearch(debouncedPersonQuery); }, [debouncedPersonQuery, onActorSearch]); const handleGenreChange=(g,t)=>{onFilterChange(f=>{const n=f[t].includes(g)?f[t].filter(id=>id!==g):[...f[t],g]; const oT=t==='includeGenres'?'excludeGenres':'includeGenres';const oL=f[oT].filter(id=>id!==g); return {...f,quickGenre:'',[t]:n,[oT]:oL}}),''}; const handlePlatformChange=(pId)=>onFilterChange(f=>({...f,platforms:f.platforms.includes(pId)?f.platforms.filter(id=>id!==pId):[...f.platforms,pId]})); const handleIndieChange = () => onFilterChange(f=>({...f,indie:!f.indie})); const filteredPlatforms = allPlatforms.filter(p=>p.provider_name.toLowerCase().includes(platformSearch.toLowerCase())); return ( <div className="modal-overlay" onClick={onClose}><div className="modal-content relative w-full max-w-4xl" onClick={e=>e.stopPropagation()}><button onClick={onClose} className="modal-close-btn text-white z-20"><svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12"/></svg></button><div className="p-4 border-b border-[var(--color-card-border)]"><h2 className="text-xl font-bold text-[var(--color-accent-text)]">Advanced Filters</h2></div><div className="p-6 overflow-y-auto"><div className="filter-modal-grid"><div className="filter-section"><h4 className="font-semibold mb-2">Include Genres</h4><div className="filter-list">{allGenres.map(g=>(<label key={`inc-${g.id}`} className={`filter-label ${filters.excludeGenres.includes(g.id)?'disabled':''}`}><input type="checkbox" className="filter-custom-input" checked={filters.includeGenres.includes(g.id)} disabled={filters.excludeGenres.includes(g.id)} onChange={()=>handleGenreChange(g.id,'includeGenres')}/>{g.name}</label>))}</div></div><div className="filter-section"><h4 className="font-semibold mb-2">Exclude Genres</h4><div className="filter-list">{allGenres.map(g=>(<label key={`exc-${g.id}`} className={`filter-label ${filters.includeGenres.includes(g.id)?'disabled':''}`}><input type="checkbox" className="filter-custom-input" checked={filters.excludeGenres.includes(g.id)} disabled={filters.includeGenres.includes(g.id)} onChange={()=>handleGenreChange(g.id,'excludeGenres')}/>{g.name}</label>))}</div></div><div className="filter-section"><h4 className="font-semibold mb-2">Platforms</h4><input type="text" placeholder="Search platforms..." value={platformSearch} onChange={e=>setPlatformSearch(e.target.value)} className="platform-search-input"/><div className="filter-list">{filteredPlatforms.map(p=>(<label key={p.provider_id} className="filter-label"><input type="checkbox" className="filter-custom-input" checked={filters.platforms.includes(p.provider_id)} onChange={()=>handlePlatformChange(p.provider_id)}/>{p.provider_name}</label>))}</div></div></div><div className="pt-4 mt-4 border-t border-[var(--color-card-border)] grid grid-cols-1 md:grid-cols-2 gap-6"><div className="filter-section"><label className="block font-semibold mb-2">Minimum Rating: <span className="text-[var(--color-accent-text)]">{filters.rating}</span></label><input type="range" min="0" max="10" step="0.5" value={filters.rating} onChange={e=>onFilterChange(f=>({...f,rating:e.target.value}))} className="range-slider"/></div><div className="filter-section"><h4 className="font-semibold mb-2">Search by Actor or Director</h4><input type="text" placeholder="e.g., Tom Hanks" value={filters.personQuery || ''} onChange={e=>onFilterChange(f=>({...f,personQuery:e.target.value,person:null}))} className="platform-search-input"/>{personResults.length>0&&<div className="filter-list">{personResults.map(p=><button key={p.id} onClick={()=>onFilterChange(f=>({...f,person:p,personQuery:p.name}))} className="text-left w-full p-2 hover:bg-[rgba(255,255,255,0.1)] rounded-md">{p.name} ({p.known_for_department})</button>)}</div>}{filters.person && <div className="filter-pill mt-2"><span>{filters.person.name}</span><button onClick={()=>onFilterChange(f=>({...f,person:null,personQuery:''}))}>&times;</button></div>}</div></div><div className="pt-4 mt-4 border-t border-[var(--color-card-border)]"><label className="filter-label"><input type="checkbox" className="filter-custom-input" checked={filters.indie} onChange={()=>onFilterChange(f=>({...f,indie:!f.indie}))}/>Search for Indie Films (fewer votes)</label></div></div><div className="p-4 border-t border-[var(--color-card-border)] mt-auto flex justify-between"><button onClick={onClearFilters} className="px-4 py-2 text-sm text-gray-400 hover:text-white">Clear All</button><button onClick={onClose} className="px-6 py-2 rounded-full surprise-me-btn text-white font-semibold">Apply & Close</button></div></div></div>);};
const UserListModalWithDetails = ({ title, items, onRemove, onClose, onShowDetails }) => ( <div className="modal-overlay" onClick={onClose}><div className="modal-content relative w-full max-w-xl" onClick={e=>e.stopPropagation()}><div className="p-4 border-b border-[var(--color-card-border)] flex justify-between items-center"><h2 className="text-xl font-bold text-[var(--color-accent-text)]">{title}</h2><button onClick={onClose} className="text-gray-400 hover:text-white"><svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" /></svg></button></div><div className="p-4 space-y-3 overflow-y-auto">{items.length > 0 ? items.map(item => (<div key={item.id} className="user-list-item"><img src={item.poster ? `${TMDB_IMAGE_BASE_URL}${item.poster}` : 'https://via.placeholder.com/96x144.png?text=?'} alt={item.title} /><div className="user-list-item-info"><div className="user-list-item-title">{item.title}</div><div className="user-list-item-year">{item.year}</div></div><button onClick={() => onShowDetails(item)} className="user-list-details-btn">Details</button><button onClick={() => onRemove(item.id)} className="user-list-remove-btn">Remove</button></div>)) : <p className="text-center text-gray-400">This list is empty.</p>}</div></div></div>);

const App = () => {
    const [userRegion, setUserRegion] = useLocalStorage('whattowatch_userRegion', null);
    const [mediaType, setMediaType] = useState('movie');
    const [selectedMedia, setSelectedMedia] = useState(null);
    const [appStatus, setAppStatus] = useState('loading');
    const [isDiscovering, setIsDiscovering] = useState(false);
    const [error, setError] = useState(null);
    const [availableRegions, setAvailableRegions] = useState([]);
    const [displayMode, setDisplayMode] = useLocalStorage('whattowatch_displayMode', 'dark');
    const [accent, setAccent] = useLocalStorage('whattowatch_accent', ACCENT_COLORS[0]);
    const [filters, setFilters] = useLocalStorage('whattowatch_filters_v6', { quickGenre: '', includeGenres: [], excludeGenres: [], platforms: [], indie: false, rating: 0, person: null, personQuery: '' });
    const [allGenres, setAllGenres] = useState([]);
    const [allPlatforms, setAllPlatforms] = useState([]);
    const [searchResults, setSearchResults] = useState([]);
    const [personResults, setPersonResults] = useState([]);
    const [modal, setModal] = useState({ type: null, data: null });
    const [watchedList, setWatchedList] = useLocalStorage('whattowatch_watched', {});
    const [watchList, setWatchList] = useLocalStorage('whattowatch_watchlist', {});
    const [isFilterModalOpen, setIsFilterModalOpen] = useState(false);
    const t = translations['en'];

    useEffect(() => { document.documentElement.className = displayMode + "-mode"; const r = document.documentElement; r.style.setProperty('--color-accent', accent.color); r.style.setProperty('--color-accent-text', accent.text); r.style.setProperty('--color-accent-gradient-from', accent.from); r.style.setProperty('--color-accent-gradient-to', accent.to); const h=(c)=>{const m=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(c);return m?{r:parseInt(m[1],16),g:parseInt(m[2],16),b:parseInt(m[3],16)}:null;};const rgb=h(accent.color);if(rgb)r.style.setProperty('--color-accent-rgb',`${rgb.r},${rgb.g},${rgb.b}`)}, [displayMode, accent]);
    const fetchApi = useCallback(async (path, params = {}) => { if (!TMDB_API_KEY || TMDB_API_KEY === 'YOUR_API_KEY_HERE') throw new Error("API Key is missing!"); const q = new URLSearchParams({ api_key: TMDB_API_KEY, ...params }); const r = await fetch(`${TMDB_BASE_URL}/${path}?${q}`); if (!r.ok) { const d = await r.json(); throw new Error(d.status_message); } return r.json(); }, []);
    const processMediaDetails = useCallback((d, mt, rg) => { const tr=d.videos?.results?.find(v=>v.site==='YouTube'&&(v.type==='Trailer'||v.type==='Teaser')); const ri=d.release_dates?.results?.find(r=>r.iso_3166_1===rg); const ce=ri?.release_dates.find(rd=>rd.certification)?.certification||''; const di=d.credits?.crew?.find(c=>c.job==='Director'); return { id: d.id, title: d.title||d.name, year:(d.release_date||d.first_air_date||'N/A').substring(0,4), poster: d.poster_path?`${TMDB_IMAGE_BASE_URL}${d.poster_path}`:'https://via.placeholder.com/500x750.png?text=No+Image', rating: d.vote_average?.toFixed(1)||'N/A', overview: d.overview, providers:d['watch/providers']?.results?.[rg]?.flatrate||[], rentProviders:[...(d['watch/providers']?.results?.[rg]?.rent||[]),...(d['watch/providers']?.results?.[rg]?.buy||[])].filter((v,i,a)=>a.findIndex(t=>(t.provider_id===v.provider_id))===i), cast:d.credits?.cast?.slice(0,10)||[], similar:d.similar?.results?.filter(s=>s.poster_path).slice(0,10).map(s=>({...s,mediaType:mt}))||[], trailerKey:tr?tr.key:null, mediaType:mt, director:di?.name, duration:d.runtime, seasons:d.number_of_seasons, certification:ce }; }, []);
    
    useEffect(() => { setAppStatus('loading'); fetchApi('configuration/countries').then(data => { setAvailableRegions(data.filter(c => TOP_COUNTRIES.includes(c.iso_3166_1)).sort((a,b) => a.english_name.localeCompare(b.english_name))); setAppStatus('ready'); }).catch(err => { setError(err.message); setAppStatus('error'); }); }, [fetchApi]);
    useEffect(() => { if (!userRegion) { setAllGenres([]); setAllPlatforms([]); return; } const fetchData = async () => { try { const [g, p] = await Promise.all([fetchApi(`genre/${mediaType}/list`), fetchApi(`watch/providers/${mediaType}`, { watch_region: userRegion })]); setAllGenres(g.genres || []); setAllPlatforms(p.results || []); } catch (err) { setError("Could not load data."); }}; fetchData(); }, [userRegion, mediaType, fetchApi]);
    
    const handleChangeCountry = () => setUserRegion(null);
    const handleToggleWatched = (media) => setWatchedList(p=>{const n={...p};if(n[media.id])delete n[media.id];else n[media.id]={id:media.id,title:media.title,year:media.year,poster:media.poster,mediaType:media.mediaType};return n;});
    const handleToggleWatchlist = (media) => setWatchList(p=>{const n={...p};if(n[media.id])delete n[media.id];else n[media.id]={id:media.id,title:media.title,year:media.year,poster:media.poster,mediaType:media.mediaType};return n;});
    const handleClearFilters = () => setFilters({ quickGenre: '', includeGenres: [], excludeGenres: [], platforms: [], indie: false, rating: 0, person: null, personQuery: '' });
    
    const handleSurpriseMe = useCallback(async () => {
        setIsDiscovering(true); setError(null);
        try { const params={'sort_by':'popularity.desc','watch_region':userRegion,'with_watch_monetization_types':'flatrate,rent,buy','vote_count.gte':filters.indie?20:300}; const gI=[filters.quickGenre,...filters.includeGenres].filter(Boolean).join(','); if (gI)params['with_genres']=gI;if(filters.excludeGenres.length)params['without_genres']=filters.excludeGenres.join(',');if(filters.platforms.length)params['with_watch_providers']=filters.platforms.join('|'); if(filters.rating > 0)params['vote_average.gte']=filters.rating; if(filters.person){if(['Directing','Writing','Production'].includes(filters.person.known_for_department)){params['with_crew']=filters.person.id}else{params['with_cast']=filters.person.id}} const data=await fetchApi(`discover/${mediaType}`,params); const totalPages=Math.min(data.total_pages,500); if(totalPages===0)throw new Error("No results with these filters."); const pageData=await fetchApi(`discover/${mediaType}`,{...params,page:Math.floor(Math.random()*totalPages)+1}); const results=pageData.results.filter(r=>r.poster_path&&!watchedList[r.id]); if(results.length===0) { throw new Error("No new results. Try changing filters or clearing your watched list."); } const randomResult=results[Math.floor(Math.random()*results.length)]; const details=await fetchApi(`${mediaType}/${randomResult.id}`,{append_to_response:'videos,credits,similar,watch/providers,release_dates'}); setSelectedMedia(processMediaDetails(details,mediaType,userRegion));
        } catch(err){setError(err.message);} finally { setIsDiscovering(false);}
    }, [mediaType, userRegion, filters, watchedList, fetchApi, processMediaDetails, t]);

    const handleSearch = useCallback(async(q)=>{if(q.trim()===''){setSearchResults([]);return;}try{const d=await fetchApi('search/multi',{query:q});const f=d.results.filter(r=>(r.media_type==='movie'||r.media_type==='tv')&&r.poster_path).slice(0,5).map(r=>({id:r.id,title:r.title||r.name,year:(r.release_date||r.first_air_date||'').substring(0,4),poster:r.poster_path,mediaType:r.media_type}));setSearchResults(f);}catch(e){console.error(e);}},[fetchApi]);
    const handleResultClick = useCallback(async(res)=>{setError(null);setIsDiscovering(true);try{const det=await fetchApi(`${res.mediaType}/${res.id}`,{append_to_response:'videos,credits,similar,watch/providers,release_dates'});setSelectedMedia(processMediaDetails(det,res.mediaType,userRegion));}catch(e){setError("Could not fetch details.");}finally{setIsDiscovering(false);}},[fetchApi,userRegion,processMediaDetails]);
    const handleActorClick = useCallback(async(id)=>{try{setModal({type:'actor',data:null});const det=await fetchApi(`person/${id}`,{append_to_response:'movie_credits,tv_credits'});setModal({type:'actor',data:det});}catch(e){setModal({type:null,data:null});}},[fetchApi]);
    const showListItemDetails = (item) => { setModal({type:null}); setTimeout(() => handleResultClick(item), 200); };
    const handleActorSearchInModal = useCallback(async (query) => { if (!query) { setPersonResults([]); return; } try { const data = await fetchApi('search/person', { query }); setPersonResults(data.results.slice(0, 5)); } catch (error) { console.error("Person search failed:", error); } }, [fetchApi]);

    if (appStatus === 'loading') { return <div className="min-h-screen flex items-center justify-center"><Loader /></div>; }
    if (appStatus === 'error') { return <ErrorDisplay message={error} />; }
    if (!userRegion) { return <CountrySelector countries={availableRegions} onSelect={setUserRegion} t={t} />; }
    
    return (
        <div className="container mx-auto max-w-4xl p-4 sm:p-6">
            <SettingsMenu t={t} currentTheme={accent} onSelectTheme={setAccent} onCountryChange={handleChangeCountry} displayMode={displayMode} onDisplayModeChange={setDisplayMode} onOpenWatched={() => setModal({type:'watched'})} onOpenWatchlist={() => setModal({type:'watchlist'})}/>
            <header className="app-header"><div className="w-full"><h1 className="app-title text-transparent bg-clip-text bg-gradient-to-r from-[var(--color-accent-gradient-from)] to-[var(--color-accent-gradient-to)]">{t.title}</h1><p className="app-subtitle">{t.subtitle}</p><SearchBar onSearch={handleSearch} searchResults={searchResults.map(r=>({...r, poster: `${TMDB_IMAGE_BASE_URL}${r.poster}`}))} onResultClick={handleResultClick} /></div></header>
            <main className="text-center">
                <div className="controls-container">
                    <div className="top-controls"><div className="inline-flex p-1 rounded-full media-type-switcher"><button onClick={() => setMediaType('movie')} className={`px-5 py-2 text-sm rounded-full media-type-btn ${mediaType==='movie'?'media-type-btn-active':''}`}>{t.movies}</button><button onClick={() => setMediaType('tv')} className={`px-5 py-2 text-sm rounded-full media-type-btn ${mediaType==='tv'?'media-type-btn-active':''}`}>{t.tvShows}</button></div><button onClick={() => setIsFilterModalOpen(true)} className="filter-btn"><svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path></svg>Filters</button></div>
                    <div className="quick-filters-section w-full max-w-2xl"><div className="quick-filter-grid">{getSeasonalGenres().map(genre => (<button key={genre.id} onClick={() => setFilters(f => ({...f, quickGenre:f.quickGenre===genre.id?'':genre.id}))} className={`quick-filter-btn ${filters.quickGenre===genre.id?'active':''}`}>{genre.name}</button>))}</div></div>
                    <button onClick={handleSurpriseMe} disabled={isDiscovering} className="w-full md:w-auto px-10 py-4 text-xl font-bold text-white rounded-full surprise-me-btn disabled:opacity-50 disabled:cursor-not-allowed">{isDiscovering?'Searching...':'Surprise Me!'}</button>
                </div>
                {isDiscovering && <Loader />}
                {error && !isDiscovering && <ErrorDisplay message={error} />}
                {selectedMedia && !isDiscovering && (<div className="movie-card-container"><div className="p-6 sm:p-8 sm:flex sm:space-x-8"><div className="sm:w-1/3 flex-shrink-0"><img src={selectedMedia.poster} alt={`Poster for ${selectedMedia.title}`} className="rounded-lg shadow-lg w-full"/>{selectedMedia.trailerKey&&(<button onClick={()=>setModal({type:'trailer',data:selectedMedia.trailerKey})} className="card-action-btn trailer-btn mt-4">Watch Trailer</button>)}</div><div className="mt-6 sm:mt-0 flex-grow text-left"><h2 className="text-3xl lg:text-4xl font-bold">{selectedMedia.title}</h2><div className="flex items-center flex-wrap gap-x-4 gap-y-1 text-[var(--color-text-secondary)] mt-2"><span>{selectedMedia.year}</span>{selectedMedia.certification&&<span className="border border-[var(--color-card-border)] px-2 py-0.5 rounded text-xs">{selectedMedia.certification}</span>}{selectedMedia.duration>0&&<span>{Math.floor(selectedMedia.duration/60)}h {selectedMedia.duration%60}m</span>}{selectedMedia.seasons&&<span>{selectedMedia.seasons} Season(s)</span>}<span>⭐ {selectedMedia.rating}</span></div><p className="mt-4 text-base leading-relaxed">{selectedMedia.overview}</p>{selectedMedia.director&&<p className="mt-4"><span className="font-semibold text-gray-400">Director:</span> {selectedMedia.director}</p>}<div className="mt-6"><h3 className="font-semibold text-lg">Available on (Subscription)</h3>{selectedMedia.providers.length>0?(<div className="flex flex-wrap gap-2 mt-2">{selectedMedia.providers.map(p=><img key={p.provider_id} src={`${TMDB_IMAGE_BASE_URL}${p.logo_path}`} alt={p.provider_name} title={p.provider_name} className="platform-logo"/>)}</div>):<p className="text-[var(--color-text-secondary)]">Not available on subscription.</p>}</div>{selectedMedia.rentProviders.length>0&&(<div className="mt-4"><h3 className="font-semibold text-lg">Available for Rent/Buy</h3><div className="flex flex-wrap gap-2 mt-2">{selectedMedia.rentProviders.map(p=><img key={p.provider_id} src={`${TMDB_IMAGE_BASE_URL}${p.logo_path}`} alt={p.provider_name} title={p.provider_name} className="platform-logo"/>)}</div></div>)}<div className="mt-6 pt-6 border-t border-[var(--color-card-border)]"><div className="card-user-actions"><button onClick={()=>handleToggleWatched(selectedMedia)} className={`user-action-btn watch-btn ${watchedList[selectedMedia.id]?'active':''}`}><svg fill="currentColor" viewBox="0 0 20 20"><path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/><path fillRule="evenodd" d="M.458 10C3.732 4.943 9.522 3 10 3s6.268 1.943 9.542 7c-3.274 5.057-9.064 7-9.542 7S3.732 15.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd"/></svg>{watchedList[selectedMedia.id]?'Watched':'Mark as Watched'}</button><button onClick={()=>handleToggleWatchlist(selectedMedia)} className={`user-action-btn watchlist-btn ${watchList[selectedMedia.id]?'active':''}`}><svg fill="currentColor" viewBox="0 0 20 20"><path d="M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-3.13L5 18V4z"/></svg>{watchList[selectedMedia.id]?'Saved':'Save for Later'}</button></div></div></div></div>{selectedMedia.cast.length>0&&(<div className="mt-8 pt-6 p-6 sm:p-8 border-t border-[var(--color-card-border)]"><h3 className="text-xl font-semibold mb-4 text-left text-[var(--color-accent-text)]">Main Cast</h3><Slider>{selectedMedia.cast.map(actor=>(<button key={actor.id} className="flex-shrink-0 w-24 text-center actor-card" onClick={()=>handleActorClick(actor.id)}><img src={actor.profile_path?`${TMDB_IMAGE_BASE_URL}${actor.profile_path}`:'https://via.placeholder.com/200x300.png?text=?'} alt={actor.name} className="actor-thumbnail"/><span className="actor-name">{actor.name}</span></button>))}</Slider></div>)}{selectedMedia.similar.length>0&&(<div className="mt-8 pt-6 p-6 sm:p-8 border-t border-[var(--color-card-border)]"><h3 className="text-xl font-semibold mb-4 text-left text-[var(--color-accent-text)]">Similar Titles</h3><Slider>{selectedMedia.similar.map(item=>(<button key={item.id} className="flex-shrink-0 w-32 text-center actor-card" onClick={()=>handleResultClick(item)}><img src={`${TMDB_IMAGE_BASE_URL}${item.poster_path}`} alt={item.title||item.name} className="rounded-lg w-full"/><span className="block mt-2 text-xs text-gray-400">{item.title||item.name}</span></button>))}</Slider></div>)}</div>)}
            </main>
            {isFilterModalOpen && <FilterModal isOpen={isFilterModalOpen} onClose={() => setIsFilterModalOpen(false)} allGenres={allGenres} allPlatforms={allPlatforms} filters={filters} onFilterChange={setFilters} onClearFilters={handleClearFilters} onActorSearch={handleActorSearchInModal} personResults={personResults} />}
            {modal.type === 'trailer' && <TrailerModal trailerKey={modal.data} onClose={() => setModal({type:null})} />}
            {modal.type === 'actor' && <ActorDetailsModal actor={modal.data} onClose={() => setModal({type:null})} />}
            {modal.type === 'watched' && <UserListModalWithDetails title="My Watched List" items={Object.values(watchedList)} onRemove={(id)=>handleToggleWatched({id})} onClose={()=>setModal({type:null})} onShowDetails={showListItemDetails} />}
            {modal.type === 'watchlist' && <UserListModalWithDetails title="My Watchlist" items={Object.values(watchList)} onRemove={(id)=>handleToggleWatchlist({id})} onClose={()=>setModal({type:null})} onShowDetails={showListItemDetails} />}
        </div>
    );
};